// Code generated by mockery v2.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/fajardm/ewallet-example/app/balance/model"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	uuid "github.com/satori/go.uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FetchBalanceHistoriesByUserID provides a mock function with given fields: _a0, _a1
func (_m *Repository) FetchBalanceHistoriesByUserID(_a0 context.Context, _a1 uuid.UUID) (model.BalanceHistories, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.BalanceHistories
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.BalanceHistories); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.BalanceHistories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetByUserID(_a0 context.Context, _a1 uuid.UUID) (*model.Balance, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Balance
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Balance); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxStore provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repository) TxStore(_a0 context.Context, _a1 *sql.Tx, _a2 model.Balance) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Balance) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Repository) Update(_a0 context.Context, _a1 model.Balance) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Balance) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
